---
layout: base
---

%h1
  Activation Strategies

%p
  Togglz defines the concept of <i>activation strategies</i>. They are responsible to
  decide whether an enabled feature is active or not. Activation strategies can for example
  be used to activate features only for specific users, for specific client IPs or
  at a specified time.

%p
  Togglz ships with the following default strategies:

%ul
  %li
    %a(href='#username')
      Username
  %li
    %a(href='#gradual-rollout')
      Gradual rollout
  %li
    %a(href='#release-date')
      Release date
  %li
    %a(href='#client-ip')
      Client IP
  %li
    %a(href='#server-ip')
      Server IP
  %li
    %a(href='#script-engine')
      ScriptEngine

%p
  The following sections will describe each strategy in detail. The last section
  <a href="#custom">custom strategies</a> describes how to build you own strategies.

%a(name='username')
%h2
  Username

%p
  Enabling features for specific users was already supported in very early versions of Togglz, 
  even before the activation strategy concept was introduced in Togglz 2.0.0.

%p
  If you select this strategy for a feature, you can specify an comma-separated list of 
  users for which the feature should be active. Togglz will use the <code>UserProvider</code> 
  you configured for the FeatureManager to determine the current user and compare it to
  that list.

%p
  Please note that Togglz will take case into account when comparing the usernames. So the
  users <code>admin</code> and <code>Admin</code> are NOT the same.

%p
  This strategy is very useful if you want to allow a specific list of users to test a certain
  feature in production.


%a(name='gradual-rollout')
%h2
  Gradual rollout

%p
  The gradual rollout strategy allows you to activate a feature to a certain percentage of
  users. This allows you to test a feature with a very small number of users and increase the
  number over time until the feature is active for everyone.

%p
  If you select this strategy, you will be asked to enter a percentage value. If you for example 
  enter <code>25</code>, Togglz will activate the feature for every forth user.

%p
  The users are selected by calculating a hash value from the username which is then normalized
  to a value between 0 and 100. The feature will be active for a user if the hash value is smaller or
  equal to the percentage you configured. This algorithm will ensure that the feature will be
  active for a user even after you increased the percentage. Have a look at the
  <a href="https://github.com/togglz/togglz/blob/master/core/src/main/java/org/togglz/core/activation/GradualActivationStrategy.java">source code</a>
  of the strategy for more details.

%a(name='release-date')
%h2
  Release date

%p
  The release date strategy can be used to automatically activate a feature at a certain
  point in time. If you select this strategy, you have to enter a date and an optional
  time for the feature to get active. If you omit the time, the feature will be activated
  at midnight. The date must be specified in the format <code>2012-12-31</code> and the
  time in the format <code>14:15:00</code>

%a(name='client-ip')
%h2
  Client IP

%p
  The client IP strategy allows you to restrict a feature to clients connecting from a specific 
  IP address. The strategy uses <code>HttpServletRequest.getRemoteAddr()</code> to obtain the IP
  address of the client. The strategy is therefore restricted to web applications running in a 
  Servlet environment.

%p
  Please note that the strategy requires you to enter a full IP address. Specifying subnets is
  currently not supported (patches are welcome). But you can enter multiple IP addresses 
  separated by comma.

%a(name='server-ip')
%h2
  Server IP

%p
  The Server IP strategy is similar to the Client IP strategy. The only difference is that
  not the client IP but the server IP address is used. This strategy is very useful
  for canary testing where you activate a feature only on a subset of your cluster nodes
  to test for things like performance issues.

%p
  The strategy uses <a href="http://docs.oracle.com/javase/7/docs/api/java/net/NetworkInterface.html#getNetworkInterfaces()">NetworkInterface.getNetworkInterfaces()</a>
  to obtain the IP addresses of the server. All IP addresses returned by this method are compared 
  against the IP addresses configured for the strategy. The feature will be active if there is at 
  least one match. 

%a(name='script-engine')
%h2
  Script Engine

%p
  The ScriptEngine strategy is the most flexible activation strategy. It allows you to use a 
  JSR223 scripting language to implement the test that decides whether the feature is active or not.
  You can use any language supported by the 
  <a href="http://docs.oracle.com/javase/7/docs/api/javax/script/ScriptEngine.html">ScriptEngine</a> 
  of your JVM. The Oracle JVM ships with an <code>ECMAScript</code> engine that allows you
  to write JavaScript for your check out of the box.

%p
  The activation strategy has two parameters. The first one is used to specify the language to use for the
  script (for example <code>ECMAScript</code>). The second parameters is the script itself. The script must
  evaluate to a boolean result. The script context is populated with a few variables that may
  be useful for you: 

%ul
  %li
    <code>user</code>: The <code>FeatureUser</code> representing the current user.
  %li
    <code>date</code>: The current time as a <code>java.util.Date</code>

%p
  This example shows a script written in JavaScript that enables the feature
  for a user named <code>john</code> on Sundays. 

%ul
  %li
    <strong>Language:</strong><br/><code>ECMAScript</code>
  %li
    <strong>Script:</strong><br/><code>user.name == 'john' && date.day == 0</code>

%p
  Please double check your script before using it for a feature. If the script evaluation
  fails due to some error, the feature will be inactive.
  
  
%a(name='custom')
%h2
  Custom Strategies

%p
  TODO

