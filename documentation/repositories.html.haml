---
layout: base
---

%h1
  Feature State Repositories

%p
  Feature State Repositories are internal data stores that are able to persist all dynamic state of a feature. This state includes:

%ul
  %li
    Is the feature enabled or not
  %li
    The user list associated with the feature

%p
  Users are able to choose the repository they want in their <code>TogglzConfig</code> implementation. Pleas see the 
  <a href="/documentation/installation.html">Installation</a> chapter for details.

%p
  This section will describe the repository implementations that are available in Togglz.

%h2
  InMemoryRepository

%p
  This repository stores the feature state entirely in memory. As the repository isn't able to persist the feature state across JVM restarts it isn't typically used in production. Instead it may be useful during development time and in integration tests.

%h2
  FileBasedRepository

%p
  The <code>FileBasedRepository</code> stores the state of features in a regular Java properties file. This repository is very easy to set up. The file based approach has some advantages compared to the other repository implementations. The most import advantage is that you are able to manually modify the properties file if you have direct access to the server running the application. This way you can very easily toggle features without the need to enable the embedded Togglz admin console.

%p
  The property files used by this repository have a very simple format:

%pre(class="prettyprint")
  :escaped
    # The feature 'FEATURE_ONE' is disabled
    FEATURE_ONE=false
    
    # The feature 'FEATURE_ONE' is enabled for the users 'admin' and 'betatester'
    FEATURE_ONE=true
    FEATURE_ONE.users=admin,betatester

%p
  The following example shows a <code>TogglzConfig</code> that uses this repository:

%pre(class="prettyprint lang-java")
  :escaped
    public class FileBasedTogglzConfiguration implements TogglzConfig {
    
        /* ..... */ 
    
        @Override
        public FeatureStateRepository getFeatureStateRepository() {
            return new FileBasedRepository(new File("/opt/myapp/config/features.properties"));
        }
    
    }

%h2
  JDBCFeatureStateRepository

%p
  This repository is able to store the feature state in regular SQL database. The implementation uses the standard Java JDBC API and just requires you to specific a <code>DataSource</code>.

%p
  It is very simple to setup this repository in a regular JEE environment. The following example shows how you can use the <code>@Resource</code> annotation to inject a JDBC Datasource bound to JNDI into your CDI-managed configuration class.

%pre(class="prettyprint lang-java")
  :escaped
    @ApplicationScoped
    public class DatabaseTogglzConfiguration implements TogglzConfig {
    
        @Resource(mappedName = "jboss/datasources/ExampleDS")
        private DataSource dataSource;
    
        /* ..... */ 
    
        @Override
        public FeatureStateRepository getFeatureStateRepository() {
            return new JDBCFeatureStateRepository(dataSource);
        }
    
    }

%p
  Please note that you won't have to manually create any database tables for the repository to work correctly. <code>JDBCFeatureStateRepository</code> will automatically create the required table on the first connection to the database. 
