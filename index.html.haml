---
layout: base
---

%h1
  Togglz

%h2
  What is it about?

%p
  Togglz is an implementation of the <a href="http://martinfowler.com/bliki/FeatureToggle.html">Feature Toggles</a> pattern for Java.
  Feature Toggles are a very common agile development practices in the context of continuous deployment and delivery.
  The basic idea is to associate a toggle with each new feature you are working on. This allows you to enable or disable these
  features at application runtime, even for individual users.

%p
  Want to learn more? Have a look at an <a href="#example">usage example</a> or check the
  <a href="quickstart.html">quickstart guide</a>.

%h2
  News

.news

  .entry
    .date
      30-Jul-2016
    .heading
      Togglz 2.3.0.Final released
    .content
      We are very proud to announce the release of Togglz 2.3.0.Final. Thanks to everyone who
      helped to get this release out. You can learn more about the latest changes on the
      <a href="/whats-new.html">what's new</a> page. Also have a look at the
      <a href="/updating-notes.html">updating notes</a> for important changes
      since 2.2.0.Final. Enjoy!

  .entry
    .date
      17-Jun-2016
    .heading
      Togglz 2.3.0.RC2 released
    .content
      We are happy to announce the release of Togglz 2.3.0.RC2. This new version adds some major
      new features which have been contributed by the community. See the <a href="/whats-new.html">what's new</a>
      page for all details. We are planning to release Togglz 2.3.0.Final very soon. So please give
      RC2 a try and report every problem you run into. The simplest way to contact us is to use the
      new <a href="https://gitter.im/togglz/togglz">Gitter chat room</a>. Please let us know what you think!

  .entry
    .date
      21-Feb-2016
    .heading
      Togglz 2.3.0.RC1 released
    .content
      I'm very proud to announce the release of Togglz 2.3.0.RC1. This release includes many cool
      new features like the Spring Boot Starter and the Hazelcast integration. We decided
      to release RC1 first to give people the chance to test the new modules and to provide
      feedback. Have a look at the <a href="/whats-new.html">what's new</a> page for a summary
      of all changes and the <a href="/updating-notes.html">updating notes</a> for important changes
      since 2.2.0.Final. Enjoy!

  .entry
    .date
      28-Jul-2015
    .heading
      Togglz 2.2.0.Final released
    .content
      I'm very proud to announce the release of Togglz 2.2.0.Final. This release includes many exciting
      new features like the new Archaius and Cassandra modules. Have a look at the
      <a href="/whats-new.html">what's new</a> page for a summary of all changes. If you are
      upgrading from 2.1.0.Final, have a look at the <a href="/updating-notes.html">updating notes</a>,
      especially if you are using the Spring integration module. Enjoy!

  .entry
    .date
      16-Dez-2014
    .heading
      Togglz 2.1.0.Final released
    .content
      %p
        We are happy to announce the release of Togglz 2.1.0.Final. This new version ships
        with various improvements and new features. Special thanks to
        <a href="https://github.com/fabito">FÃ¡bio Franco Uechi</a> for his help on the AppEngine
        and Guice modules. Have a look at the <a href="/whats-new.html">what's new</a> for details!

%h2
  Why should you choose Togglz?

%p
  %b
    Because Togglz...

%ul
  %li
    allows you to declare your features using a regular Java enum type.
  %li
    is configured in a type-safe way by implementing a single interface.
  %li
    provides integration with popular frameworks like CDI, Spring, JSF, etc.
  %li
    supports different backends for storing toggle states (JDBC database, Java property files, etc)
  %li
    can be integrated with your user identity management which allows to enable features only for specific users.
  %li
    integrates with common security frameworks like JAAS, Spring Security, Seam Security and Apache Shiro.
  %li
    supports complex application packaging scenarios like EARs, skinny WARs, etc.
  %li
    ships with an embedded web-based admin console to manage feature states.

%a(name="example")
%h2
  Example

%p
  Features are declared using a regular Java enum type:

%pre(class="prettyprint lang-java")
  :escaped
    public enum MyFeatures implements Feature {

        @Label("First Feature")
        FEATURE_ONE,

        @Label("Second Feature")
        FEATURE_TWO;

        public boolean isActive() {
            return FeatureContext.getFeatureManager().isActive(this);
        }

    }

%p
  Checking whether a specific feature is enabled for the current user is very simple. Just call the <code>isActive()</code>
  method on the feature.

%pre(class="prettyprint lang-java")
  :escaped
    public void someBusinessMethod() {

      if( MyFeatures.FEATURE_ONE.isActive() ) {
        // do new exciting stuff here
      }

      [...]

    }

%p
  You can find more details in the <a href="quickstart.html">quickstart guide</a>.
