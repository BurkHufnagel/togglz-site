---
layout: base
---

%h1
  Togglz

%h2
  What is it about?

%p
  Togglz is an implementation of the <a href="http://martinfowler.com/bliki/FeatureToggle.html">Feature Toggles</a> pattern for Java.
  Feature Toggles are a very common agile development practices in the context of continuous deployment and delivery.
  The basic idea is to associate a toggle with each new feature you are working on. This allows you to enable or disable these
  features at application runtime, even for individual users.

%p
  Want to learn more? Have a look at an <a href="#example">usage example</a> or check the 
  <a href="quickstart.html">quickstart guide</a>.

%h2
  News

.news

  .entry
    .date 
      01-Jul-2013
    .heading
      Togglz 2.0.0.Final released
    .content
      %p
        I'm very happy to announce the release of Togglz 2.0.0.Final. This new version is the result of many
        months of hard work. Many core concepts of Togglz have been revised to provide much more
        flexibility. 
      %p
        The most noteworthy change in Togglz 2.0.0.Final is the new extendible feature 
        activation mechanism that allows to implement custom strategies for activating features. 
        Beside that there are many other updates. You can learn more about them on the 
        <a href="/whats-new.html">what's new</a> page.
      %p
        If you are updating from Togglz 1.1.x, you should have a look at the
        <a href="/updating-notes.html">updating notes</a>. You can get the new version from the 
        <a href="/download.html">download page</a>. Feel free to post on the 
        <a href="forums/togglz-users.html">forums</a> if you have any problems with updating.

  .entry
    .date 
      01-Apr-2013
    .heading
      Togglz 2.0.0.Beta1 and 1.1.1.Final released
    .content
      We are very proud to announce two Togglz releases today. Togglz 1.1.1.Final is a bugfix release of the 1.1.x branch. If you
      are currently using Togglz 1.1.0.Final, you should update to this version soon, because it fixes some concurrency issues in the 
      state repositories. 
    .content
      At the same time we have released Togglz 2.0.0.Beta1, which is the latest version of the new 2.x branch. 
      So if you want to have a look at the latest and greatest version of Togglz, you should give it a try. 
      Please have a look at the <a href="/whats-new.html">what's new</a> section to learn about the major changes 
      and the things to take care of before doing the update.

  .entry
    .date 
      18-Oct-2012
    .heading
      Togglz 1.1.0.Final released
    .content
      I'm very proud to announce the release of Togglz 1.1.0.Final. This version is the result of various feedback 
      from the community. You can get the new version from the <a href="/download.html">download page</a> and check out 
      <a href="/whats-new.html">what's new</a>.

  .entry
    .date 
      01-Oct-2012
    .heading
      Togglz article in JavaMagazin 2012/11
    .content
      The current issue of the German 
      <a href="http://it-republik.de/jaxenter/java-magazin-ausgaben/invokedynamic-000521.html">JavaMagazin</a>
      comes with an article describing how to start practicing continuous delivery with Togglz. The article is called 
      <i>On and off - Togglz: Feature Toggle f√ºr Java-Applikationen</i>. You are are speaking German and are interested
      in Togglz? In this case you should get a copy of the latest JavaMagazin.

  .entry
    .date 
      03-Jul-2012
    .heading
      Togglz session on gearconf 2012
    .content
      My Togglz session on <a href="http://gearconf.com/">gearconf 2012</a> was a huge success. I got awesome feedback
      which confirmed, that Togglz is the perfect first step into the world of continuous delivery.
      If you are interested in the session, you can have a look at the 
      <a href="http://de.slideshare.net/chkal/feature-flags-mit-togglz">slides</a> and the 
      <a href="https://vimeo.com/45076301">video</a> (both in German).

%h2
  Why should you choose Togglz?

%p
  %b
    Because Togglz...
  
%ul
  %li
    allows you to declare your features using a regular Java enum type.
  %li
    is configured in a type-safe way by implementing a single interface.
  %li
    provides integration with popular frameworks like CDI, Spring, JSF, etc.
  %li
    supports different backends for storing toggle states (JDBC database, Java property files, etc)
  %li
    can be integrated with your user identity management which allows to enable features only for specific users.
  %li
    integrates with common security frameworks like JAAS, Spring Security, Seam Security and Apache Shiro. 
  %li
    supports complex application packaging scenarios like EARs, skinny WARs, etc.
  %li
    ships with an embedded web-based admin console to manage feature states. 

%a(name="example")
%h2
  Example
  
%p
  Features are declared using a regular Java enum type:
  
%pre(class="prettyprint lang-java")
  :escaped
    public enum MyFeatures implements Feature {
    
        @Label("First Feature")
        FEATURE_ONE,
        
        @Label("Second Feature")
        FEATURE_TWO;
        
        public boolean isActive() {
            return FeatureContext.getFeatureManager().isActive(this);
        }
        
    }

%p
  Checking whether a specific feature is enabled for the current user is very simple. Just call the <code>isActive()</code>
  method on the feature.

%pre(class="prettyprint lang-java")
  :escaped
    public void someBusinessMethod() {
    
      if( MyFeatures.FEATURE_ONE.isActive() ) {
        // do new exciting stuff here
      }

      [...]
      
    }

%p
  You can find more details in the <a href="quickstart.html">quickstart guide</a>.